#include <QApplication>
#include "stdio.h"
#include <QRegExp>
#include <QStringList>
#include <QDateTime>

#include <math.h>
#include "../includes/modbus.h"

QByteArray unPack(QByteArray ba)
{
	QByteArray ret;
	
	int cb = qMin(7, ba.size() - 1);
	unsigned char b, num = cb;
	qDebug("Control byte: %x; Packed bytes: %d", (unsigned char)ba.at(cb), num);
	
	for (int i = 0; i < ba.length(); i++)
	{
		if (i != cb)
		{
			b = (ba.at(i) & 0x7F) | ((ba.at(cb) & (0x01 << (cb - i + 6 - num))) << (num - cb + i + 1));
			qDebug("Source byte: %x => %x", (unsigned char)ba.at(i), b);
			ret.append(b);
		}
		else
		{
			num = qMin(cb + 8, ba.size() - 1) - cb - 1;
			cb = qMin(cb + 8, ba.size() - 1);
			qDebug("Control byte: %x; Packed bytes: %d", (unsigned char)ba.at(cb), num);
		}
	}
	return ret;
}

QByteArray crc16(QByteArray data)
{
	QByteArray ret;
	ret.resize(2);
	
	
	unsigned short b, crc = 0;
	
	for (int i = 0; i < data.size(); i++)
	{
		b = data.at(i);
		crc = crc ^ (b << 8);
		for (int j = 1; j < 9; j++)
		{
			if (crc & 0x8000)
			{
				crc = crc << 1;
				crc = crc ^ 0x1021;
			}
			else
				crc = crc << 1;
		}
	}
	crc |= 0x8080;
	
	memcpy(ret.data(), &crc, 2);
	return ret;
}

QByteArray pack(QByteArray data)
{
	QByteArray ret;
	
	//”паковываем данные	
	byte c = 0;
	int idx = 0;
	for (int i = 1; idx < data.size(); i++)
	{
		//qDebug("i=%d idx=%d", i, idx);
		if (i % 8 != 0)
		{
			//qDebug("Sdvig: %d", i % 7);
			c |= (0x80 & data.at(idx)) >> (i % 8);
			ret.push_back((char)0x80 | data.at(idx));
			idx++;
		}
		else
		{
			ret.push_back((char)0x80 | c);
			c = 0;
		}
		//qDebug("C=%.2X ", c);
	}
	if (data.size() % 7 != 0) ret.push_back((char)0x80 | c);
	return ret;
}

typedef unsigned char BYTE;
typedef unsigned short WORD;

unsigned char * getHash(unsigned char * data, int length, bool append)
{
	static const WORD wCRCTable[] = {
	0X0000, 0XC0C1, 0XC181, 0X0140, 0XC301, 0X03C0, 0X0280, 0XC241,
	0XC601, 0X06C0, 0X0780, 0XC741, 0X0500, 0XC5C1, 0XC481, 0X0440,
	0XCC01, 0X0CC0, 0X0D80, 0XCD41, 0X0F00, 0XCFC1, 0XCE81, 0X0E40,
	0X0A00, 0XCAC1, 0XCB81, 0X0B40, 0XC901, 0X09C0, 0X0880, 0XC841,
	0XD801, 0X18C0, 0X1980, 0XD941, 0X1B00, 0XDBC1, 0XDA81, 0X1A40,
	0X1E00, 0XDEC1, 0XDF81, 0X1F40, 0XDD01, 0X1DC0, 0X1C80, 0XDC41,
	0X1400, 0XD4C1, 0XD581, 0X1540, 0XD701, 0X17C0, 0X1680, 0XD641,
	0XD201, 0X12C0, 0X1380, 0XD341, 0X1100, 0XD1C1, 0XD081, 0X1040,
	0XF001, 0X30C0, 0X3180, 0XF141, 0X3300, 0XF3C1, 0XF281, 0X3240,
	0X3600, 0XF6C1, 0XF781, 0X3740, 0XF501, 0X35C0, 0X3480, 0XF441,
	0X3C00, 0XFCC1, 0XFD81, 0X3D40, 0XFF01, 0X3FC0, 0X3E80, 0XFE41,
	0XFA01, 0X3AC0, 0X3B80, 0XFB41, 0X3900, 0XF9C1, 0XF881, 0X3840,
	0X2800, 0XE8C1, 0XE981, 0X2940, 0XEB01, 0X2BC0, 0X2A80, 0XEA41,
	0XEE01, 0X2EC0, 0X2F80, 0XEF41, 0X2D00, 0XEDC1, 0XEC81, 0X2C40,
	0XE401, 0X24C0, 0X2580, 0XE541, 0X2700, 0XE7C1, 0XE681, 0X2640,
	0X2200, 0XE2C1, 0XE381, 0X2340, 0XE101, 0X21C0, 0X2080, 0XE041,
	0XA001, 0X60C0, 0X6180, 0XA141, 0X6300, 0XA3C1, 0XA281, 0X6240,
	0X6600, 0XA6C1, 0XA781, 0X6740, 0XA501, 0X65C0, 0X6480, 0XA441,
	0X6C00, 0XACC1, 0XAD81, 0X6D40, 0XAF01, 0X6FC0, 0X6E80, 0XAE41,
	0XAA01, 0X6AC0, 0X6B80, 0XAB41, 0X6900, 0XA9C1, 0XA881, 0X6840,
	0X7800, 0XB8C1, 0XB981, 0X7940, 0XBB01, 0X7BC0, 0X7A80, 0XBA41,
	0XBE01, 0X7EC0, 0X7F80, 0XBF41, 0X7D00, 0XBDC1, 0XBC81, 0X7C40,
	0XB401, 0X74C0, 0X7580, 0XB541, 0X7700, 0XB7C1, 0XB681, 0X7640,
	0X7200, 0XB2C1, 0XB381, 0X7340, 0XB101, 0X71C0, 0X7080, 0XB041,
	0X5000, 0X90C1, 0X9181, 0X5140, 0X9301, 0X53C0, 0X5280, 0X9241,
	0X9601, 0X56C0, 0X5780, 0X9741, 0X5500, 0X95C1, 0X9481, 0X5440,
	0X9C01, 0X5CC0, 0X5D80, 0X9D41, 0X5F00, 0X9FC1, 0X9E81, 0X5E40,
	0X5A00, 0X9AC1, 0X9B81, 0X5B40, 0X9901, 0X59C0, 0X5880, 0X9841,
	0X8801, 0X48C0, 0X4980, 0X8941, 0X4B00, 0X8BC1, 0X8A81, 0X4A40,
	0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
	0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
	0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };
	
	BYTE nTemp;
	WORD wCRCWord = 0xFFFF;
	int i = 0;
	
	while ((length--) > 0)
	{
		nTemp = data[i++] ^ wCRCWord;
		wCRCWord >>= 8;
		wCRCWord ^= wCRCTable[nTemp];
	}
	if (append)
	{
		memcpy(data + i, &wCRCWord, sizeof(WORD));
	}
	return (BYTE *)&wCRCWord;
	
}
int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

//     0x02, 0x0A, 0xAA, 0x82, 0x81, 0x00, 0x80, 0x80, 0x80, 0x81, 0xD7, 0x84, 0x80, 0x80, 0x80, 0xC8, 0x80, 0x80, 0x80, 0x80, 0x80, 0xA0, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xC8, 0x83, 0x03
// S:  0x02, 0x0A, 0xAA, 0x82, 0x81, 0x00, 0x80, 0x80, 0x80, 0x81, 0x89, 0xF0, 0x80, 0x80, 0x80, 0xC8, 0x80, 0x80, 0x80, 0x80, 0x80, 0xA0, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF5, 0xE9, 0x03
// R:  06, 0x02, 0xAA, 0xA0, 0x82, 0x81, 0x80, 0xA1, 0xC6, 0xB0, 0x90, 0x92, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xD3, 0x03|


// S1: 02, 0x0A, 0xAA, 0x83, 0x81, 0x00, 0x82, 0x80, 0x80, 0x81, 0x89, 0xF0, 0x83, 0x80, 0x80, 0xDA, 0x82, 0x94, 0xB0, 0x80, 0xA9, 0x80, 0x90, 0x92, 0x80, 0x80, 0x80, 0xB0, 0x90, 0x80, 0x92, 0x80, 0x81, 0x80, 0x80, 0xD1, 0xB7, 0x03|
// S2: 02, 0x0A, 0xAA, 0x84, 0x81, 0x00, 0x82, 0x80, 0x80, 0x81, 0x89, 0xF0, 0x83, 0x80, 0x80, 0xDA, 0x82, 0x94, 0xB0, 0x80, 0xA9, 0x80, 0x90, 0x92, 0x80, 0x80, 0x80, 0xB0, 0x90, 0x80, 0x92, 0x80, 0x81, 0x81, 0x80, 0x93, 0x9A, 0x03|
// Rluk: 02, 0xAA, 0xA0, 0x82, 0x81, 0x80, 0xA0, 0xA6, 0xB0, 0x90, 0x92, 0x80, 0x80, 0x80, 0x80, 0xDB, 0xB5, 0x03|
// S5: 02, 0x0A, 0xAA, 0x83, 0x81, 0x00, 0x82, 0x80, 0x80, 0x81, 0x89, 0xF0, 0x83, 0x80, 0x80, 0xDA, 0x82, 0x80, 0x80, 0x80, 0xA9, 0x80, 0x90, 0x92, 0x80, 0x80, 0x80, 0xB0, 0x90, 0x80, 0x92, 0x80, 0x81, 0x84, 0x80, 0xCE, 0xDB, 0x03|
// R5: , 0x02, 0xAA, 0xA0, 0x83, 0x07, 0x80, 0x80, 0x80, 0xB0, 0x90, 0x92, 0x81, 0x80, 0x80, 0x81, 0x80, 0x89, 0xE7, 0xE6, 0xE6, 0x88, 0xE6, 0xB0, 0xA3, 0xB0, 0x80, 0xA9, 0x90, 0x80, 0x92, 0x81, 0x80, 0x81, 0x80, 0x89, 0x82, 0x81, 0xB7, 0x03|
// S8: 02, 0x0A, 0xAA, 0x86, 0x81, 0x00, 0x82, 0x80, 0x80, 0x81, 0x89, 0xF0, 0x83, 0x80, 0x80, 0xDA, 0x82, 0x80, 0x80, 0x80, 0xA9, 0x80, 0x90, 0x92, 0x80, 0x80, 0x80, 0xB0, 0x90, 0x80, 0x92, 0x80, 0x81, 0x87, 0x80, 0xE2, 0xA2, 0x
// 1010101010100000
// 0000010101010101
// 0000101010101010

/*
-0x80, 0x80, 0x80, 0xB0, 0x90, 0x92, 0x81, 0x80, 0x80, 0x81, 0x80, 0x89, 0xE7, 0xE6, 0xE6, 0x88, 0xE6, 0xB0, 0xA3, 0xB0, 0x80, 0xA9, 0x90, 0x80, 0x92, 0x81, 0x80, 0x81, 0x80, 0x89, 0x82
-0x80, 0x80, 0x80, 0x80, 0xBA, 0xA3, 0x80, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x80, 0x89, 0x99, 0x99, 0x99, 0x99, 0xBD, 0xBE, 0xA2, 0xB0, 0x80, 0xA9, 0x90, 0x92, 0x80
-0x81, 0x80, 0x81, 0x80, 0x89, 0x99, 0x99, 0x87, 0x99, 0x99, 0xC9, 0xA2, 0x80, 0x80, 0xA9, 0xE0, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x89, 0x81, 0x80, 0x80, 0x80, 0x80, 0xC6, 0xA1, 0x80
-0xB0, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x80, 0x81, 0x80, 0x89, 0xE7, 0xE6, 0xE6, 0xE6, 0x90, 0xDA, 0xA1, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x80, 0x81, 0x80, 0x81, 0x80, 0x89, 0xE6, 0x84
-0xE6, 0xE6, 0xE6, 0xD4, 0xA0, 0xB0, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x80, 0x89, 0xCC, 0xCC, 0xCC, 0xCC, 0xBE, 0xA0, 0xFC, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80
-0x80, 0x81, 0x80, 0x89, 0x9A, 0x99, 0x99, 0x8F, 0x99, 0xCF, 0x99, 0xB0, 0x80, 0xA9, 0x90, 0xC0, 0x92, 0x81, 0x80, 0x81, 0x80, 0x89, 0x80, 0x82, 0x80, 0x80, 0x80, 0xD8, 0x99, 0x80, 0x80
-0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x80, 0x89, 0x9A, 0x99, 0x99, 0x99, 0xE1, 0xBE, 0x98, 0xB0, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x80, 0x81, 0x80, 0x89, 0xB3, 0xB3, 0x88
-0xB3, 0xB3, 0xDF, 0x98, 0x80, 0x80, 0xA9, 0x80, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x89, 0x81, 0x99, 0x99, 0x99, 0x99, 0xE7, 0x97, 0xB0, 0xF8, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x80
-0x81, 0x80, 0x89, 0xB3, 0xB3, 0xB3, 0xB3, 0x90, 0xDF, 0x97, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x80, 0x81, 0x80, 0x81, 0x80, 0x89, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xDD, 0x96, 0xB0, 0x80, 0xE0
-0xA9, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x80, 0x89, 0xB3, 0xB3, 0xB3, 0xB3, 0xDF, 0x96, 0xC0, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x80, 0x81, 0x80, 0x89, 0x99, 0x99, 0x99, 0x9E
-0x99, 0xE7, 0x95, 0xB0, 0x80, 0xA9, 0x90, 0xC0, 0x92, 0x81, 0x80, 0x81, 0x80, 0x89, 0xB4, 0x82, 0xB3, 0xB3, 0xB3, 0xE5, 0x95, 0x80, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80
-0x80, 0x89, 0xE7, 0xE6, 0xE6, 0xE6, 0xF8, 0xA0, 0x94, 0xB0, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x80, 0x81, 0x80, 0x89, 0xCD, 0xCC, 0xCC, 0x8F, 0xCC, 0xE2, 0x94, 0x80, 0x80, 0xA9, 0xC0
-0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x89, 0x81, 0x81, 0x80, 0x80, 0x80, 0xF0, 0x93, 0xB0, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x80, 0x89, 0xE6, 0xE6, 0xE6, 0xE6, 0xA0
0xE0, 0x93, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x80, 0x81, 0x80, 0x81, 0x80, 0x89, 0xE6, 0xE6, 0x84, 0xE6, 0xE6, 0xC2, 0x92, 0xB0, 0x80, 0xA9, 0x80, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x80
0x89, 0xB3, 0xB3, 0xB3, 0xB3, 0xC1, 0x92, 0xC0, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x80, 0x81, 0x80, 0x89, 0xCC, 0xCC, 0xCC, 0xCC, 0x9F, 0xCA, 0x91, 0xB0, 0x80, 0xA9, 0x90, 0x80
0x92, 0x81, 0x80, 0x81, 0x80, 0x89, 0x9A, 0x83, 0x99, 0x99, 0x99, 0xE1, 0x91, 0x80, 0x80, 0xF0, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x80, 0x89, 0xE6, 0xE6, 0xE6, 0xE6, 0xF2, 0xC0
0x90, 0xB0, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x80, 0x81, 0x80, 0x89, 0x80, 0x80, 0x80, 0x88, 0x80, 0xEA, 0x90, 0x80, 0x80, 0xA9, 0x90, 0x80, 0x92, 0x81, 0x80, 0x81, 0x80, 0x89, 0x82
0xB4, 0xB3, 0xB3, 0xB3, 0xE5, 0x89, 0xB0, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x80, 0x89, 0x9A, 0x99, 0x99, 0x99, 0xE1, 0xBE, 0x89, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x80
0x81, 0x80, 0x81, 0x80, 0x89, 0xB3, 0xB3, 0x84, 0xB3, 0xB3, 0xD9, 0x88, 0xB0, 0x80, 0xA9, 0x80, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x89, 0x81, 0xB3, 0xB3, 0xB3, 0xB3, 0xC1, 0x88, 0x80
0x80, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x80, 0x81, 0x80, 0x89, 0x80, 0x80, 0x80, 0x80, 0x90, 0xAE, 0x87, 0xB0, 0x80, 0xA9, 0x90, 0x92, 0x80, 0x81, 0x80, 0x81, 0x80, 0x89, 0x9A, 0x86
0x99, 0x99, 0x99, 0x9F, 0x87, 0x80, 0x80, 0xF0, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x80, 0x89, 0x80, 0x80, 0x80, 0x80, 0x96, 0x86, 0xC0, 0xB0, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80
0x80, 0x81, 0x80, 0x89, 0xE6, 0xE6, 0xE6, 0x88, 0xE6, 0x92, 0x86, 0x80, 0x80, 0xA9, 0x90, 0x80, 0x92, 0x81, 0x80, 0x81, 0x80, 0x89, 0x80, 0x82, 0x80, 0x80, 0x80, 0x90, 0x85, 0xB0, 0x80
0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x80, 0x89, 0xB3, 0xB3, 0xB3, 0xB3, 0x9D, 0xA0, 0x85, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x80, 0x81, 0x80, 0x89, 0x9A, 0x99, 0x8E
0x99, 0x99, 0x99, 0x84, 0xB0, 0x80, 0xA9, 0xE0, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x89, 0x81, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x84, 0x80, 0xF8, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x80
0x81, 0x80, 0x89, 0xCD, 0xCC, 0xCC, 0xCC, 0x9F, 0x94, 0x83, 0xB0, 0x80, 0xA9, 0x90, 0x92, 0x80, 0x81, 0x80, 0x81, 0x80, 0x89, 0x99, 0x99, 0x87, 0x99, 0x99, 0x8D, 0x83, 0x80, 0x80, 0xE0
0xA9, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x80, 0x89, 0xCD, 0xCC, 0xCC, 0xCC, 0x94, 0x82, 0xFC, 0xB0, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x80, 0x81, 0x80, 0x89, 0x99, 0x99, 0x99, 0x9E
0x99, 0x93, 0x82, 0x80, 0x80, 0xA9, 0x90, 0xC0, 0x92, 0x81, 0x80, 0x81, 0x80, 0x89, 0xE7, 0x82, 0xE6, 0xE6, 0xE6, 0x8C, 0x81, 0xB0, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x81, 0x80
0x80, 0x89, 0xB3, 0xB3, 0xB3, 0xB3, 0x8B, 0xA0, 0x81, 0x80, 0x80, 0xA9, 0x90, 0x92, 0x81, 0x80, 0x80, 0x81, 0x80, 0x89, 0x80, 0x80, 0x80, 0x88, 0x80, 0x8A, 0x80, 0xB0, 0x80, 0xA9, 0x80
0x90, 0x92, 0x81, 0x80, 0x81, 0x80, 0x89, 0x81, 0xE6, 0xE6, 0xE6, 0xE6, 0x98, 0x80, 0x80, 0x80
*/

	

	
	unsigned char buf[] = { 0x4F, 0x00, 0x00, 0x00 }, b[2];
	//02|00|00|01|09|70|03|00|5A|02|14|30|00|29|10|12|00|00|
	//02|00|00|01|09|70|03|00|5A|02|14|30|00|29|10|12|00|00|
	// Ћюкшудь€
	//00|20|26|30|10|12|00|80|00|68|34|F4|00|80|3E|80|34|7F|
	
	//02|00|00|01|09|70|03|00|5A|02|00|00|00|29|10|12|00|00|
	//00|00|00|30|10|12|01|00|01|00|89|67|66|66|66|30|23|30|00|29|10|12|01|00|01|00|89|
	//02|00|00|01|09|70|03|00|5A|02|00|00|00|29|10|12|00|00|
	
	getHash(buf, 2, true);

	QByteArray ba((const char *)buf, 4);
	
	for (int i = 0; i < ba.length(); i++)
	{
		printf("%.2X|", (unsigned char)ba.at(i));
	}
	printf("\n");
	
	
	
	
	return a.exec();
}
